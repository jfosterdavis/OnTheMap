//
//  StudentInformationModel.swift
//  OnTheMap
//
//  Created by Jacob Foster Davis on 9/5/16.
//  Copyright Â© 2016 Udacity. All rights reserved.
//

import Foundation

// MARK: StudentInformation

// This struct holds an entire data set for a pin
struct StudentInformation {
    
    // MARK: Properties
    var objectID : String? //Description: an auto-generated id/key generated by Parse which uniquely identifies a StudentLocation
    var uniqueKey : String? //Description: an extra (optional) key used to uniquely identify a StudentLocation; you should populate this value using your Udacity account id
    var firstName : String? //Description: the first name of the student which matches their Udacity profile first name
    var lastName : String? //Description: the last name of the student which matches their Udacity profile last name
    var mapString : String? //Description: the location string used for geocoding the student location
    var mediaURL : String? //Description: the URL provided by the student
    var latitude : Float? //Description: the latitude of the student location (ranges from -90 to 90)
    var longitude : Float? //Description: the longitude of the student location (ranges from -180 to 180)
    var createdAt : NSDate? //Description: the date when the student location was created
    var updatedAt : NSDate? //Description: the date when the student location was last updated
    
    // A Set that contains the JSON keys expected from the server.  Used to check input and check for errors or unexpected input
    let expectedKeys : Set<String> = ["objectId", "uniqueKey", "firstName", "lastName", "mapString", "mediaURL", "latitude", "longitude", "createdAt", "updatedAt"]
    
    // MARK: Error cases
    enum StudentInformationKeyError: ErrorType {
        case BadInputKeys(keys: [String]) //couldn't convert incoming dictionary keys to a set of Strings
        case InputMismatchKeys(keys: Set<String>) //incoming keys don't match expected keys
    }
    
    enum StudentInformationAssignmentError: ErrorType {
        case BadInputValues(property: String)   
    }
  
    
    // MARK: init
    init(fromDataSet data: [String:AnyObject]){
        //try to stuff the data into the properties of this instance
        do {
            try checkInputKeys(data)
        } catch StudentInformationKeyError.BadInputKeys (let keys){
            print("BadInputKeys: ")
            print(keys)
        } catch StudentInformationKeyError.InputMismatchKeys(let keys) {
            print("InputMismatchKeys: ")
            print(keys)
        } catch {
            print("Unknown error when calling checkInputKeys")
        }
        
        do {
            try attemptToAssignValues(data)
        } catch StudentInformationAssignmentError.BadInputValues(let propertyName) {
            print("StudentInformationAssignmentError: ")
            print(propertyName)
        }catch {
            print("Unknown error when calling attemptToAssignValues")
        }
    }
    
    //withiout a data set
    init() {
        
    }
    
    
    // MARK: - checkInputKeys(data: [String:AnyObject]) throws -> Bool
    func checkInputKeys(data: [String:AnyObject]) throws -> Bool {
        //guard check one: Put the incoming keys into a set
        
        let keysToCheck = [String](data.keys) as? [String]
        print("About to check these keys against expected: " + String(keysToCheck))
        //check to see if incoming keys can be placed into a set of strings
        guard let incomingKeys : Set<String> = keysToCheck.map(Set.init) else {
            throw StudentInformationKeyError.BadInputKeys(keys: [String](data.keys))
        }
        
        //compare the new set with the expectedKeys
        guard incomingKeys == self.expectedKeys else {
            throw StudentInformationKeyError.InputMismatchKeys(keys: incomingKeys)
        }
        
        print("The following sets appear to match: ")
        print(self.expectedKeys)
        print(keysToCheck!)
        
        //Keys match
        return true
    }
    
    // MARK: - attemptToAssignValues(data: [String:AnyObject]) throws -> Bool
    mutating func attemptToAssignValues(data: [String:AnyObject]) throws -> Bool {
        
        //go through each item and attempt to assign it to the struct
        print("\nAbout to assign values from the following object: ")
        print(data)
        // ObjectID
        if let inboundObject = data["objectId"] as? String {
            print("Processing object with id: " + inboundObject)
            self.objectID = inboundObject
        } else {
            throw StudentInformationAssignmentError.BadInputValues(property: "objectId")
        }
        
        // uniqueKey
        if let inboundObject = data["uniqueKey"] as? String {
            print("Processing object with uniquekey: " + inboundObject)
            self.uniqueKey = inboundObject
        } else {
            throw StudentInformationAssignmentError.BadInputValues(property: "uniqueKey")
        }
        
        // firstName
        if let inboundObject = data["firstName"] as? String {
            print("Processing object with firstname: " + inboundObject)
            self.firstName = inboundObject
        } else {
            throw StudentInformationAssignmentError.BadInputValues(property: "firstName")
        }
        
        // lastName
        if let inboundObject = data["lastName"] as? String {
            print("Processing object with lastName: " + inboundObject)
            self.lastName = inboundObject
        } else {
            throw StudentInformationAssignmentError.BadInputValues(property: "lastName")
        }
        
        // mapString
        if let inboundObject = data["mapString"] as? String {
            print("Processing object with mapString: " + inboundObject)
            self.mapString = inboundObject
        } else {
            throw StudentInformationAssignmentError.BadInputValues(property: "mapString")
        }
        
        // mediaURL
        if let inboundObject = data["mediaURL"] as? String {
            print("Processing object with mediaURL: " + inboundObject)
            self.mediaURL = inboundObject
        } else {
            throw StudentInformationAssignmentError.BadInputValues(property: "mediaURL")
        }
        
        // latitude
        if let inboundObject = data["latitude"] as? Float {
            print("Processing object with latitude: " + String(inboundObject))
            self.latitude = inboundObject
        } else {
            throw StudentInformationAssignmentError.BadInputValues(property: "latitude")
        }
        
        // longitude
        if let inboundObject = data["longitude"] as? Float {
            print("Processing object with longitude: " + String(inboundObject))
            self.longitude = inboundObject
        } else {
            throw StudentInformationAssignmentError.BadInputValues(property: "longitude")
        }
        
        //date formating from http://stackoverflow.com/questions/24777496/how-can-i-convert-string-date-to-nsdate
        //http://userguide.icu-project.org/formatparse/datetime
        let dateFormatter = NSDateFormatter()
        dateFormatter.dateFormat = "y-MM-dd'T'HH:mm:ss.SSS'Z'"
        //http://stackoverflow.com/questions/35539929/time-zone-in-swift-nsdate
        dateFormatter.timeZone = NSTimeZone(abbreviation: "GMT")
        
        // createdAt
        if let inboundObject = dateFormatter.dateFromString((data["createdAt"] as? String)!) {
            print("Processing object with createdAt: " + String(inboundObject))
            self.createdAt = inboundObject
        } else {
            throw StudentInformationAssignmentError.BadInputValues(property: "createdAt")
        }
        
        // updatedAt
        if let inboundObject = dateFormatter.dateFromString((data["updatedAt"] as? String)!) {
            print("Processing object with updatedAt: " + String(inboundObject))
            self.updatedAt = inboundObject
        } else {
            throw StudentInformationAssignmentError.BadInputValues(property: "updatedAt")
        }
        
        //all values assigned successfully
        return true
    }
    
    
}
